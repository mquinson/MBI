#! /usr/bin/python3
import sys
from generator_utils import *

template = """// @{generatedby}@
/* ///////////////////////// The MPI Bugs Initiative ////////////////////////

  Origin: MBI

  Description: @{shortdesc}@
    @{longdesc}@

BEGIN_MPI_FEATURES
  P2P!basic: Lacking
  P2P!nonblocking: Lacking
  P2P!persistent: Lacking
  COLL!basic: @{collfeature}@
  COLL!nonblocking: @{icollfeature}@
  COLL!persistent: Lacking
  COLL!tools: Lacking
  RMA: Lacking
END_MPI_FEATURES

BEGIN_MBI_TESTS
  $ mpirun -np 2 ${EXE}
  | @{outcome}@
  | @{errormsg}@
END_MBI_TESTS
//////////////////////       End of MBI headers        /////////////////// */

#include <mpi.h>
#include <stdio.h>

#define buff_size 128


int main(int argc, char **argv) {
  int nprocs = -1;
  int rank = -1;
  int root = 0;

  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  printf("Hello from rank %d \\n", rank);

  if (nprocs < 2)
    printf("MBI ERROR: This test needs at least 2 processes to produce a bug!\\n");

  MPI_Comm newcom = MPI_COMM_WORLD;
  MPI_Datatype type = MPI_INT;
  MPI_Op op = MPI_SUM;
  @{change_op}@

  @{init}@
  @{operation}@ /* MBIERROR */
  @{fini}@

  MPI_Finalize();
  printf("Rank %d finished normally\\n", rank);
  return 0;
}
"""


for c in coll4op + icoll4op:
    patterns = {}
    patterns = {'c': c}
    patterns['generatedby'] = f'DO NOT EDIT: this file was generated by {sys.argv[0]}. DO NOT EDIT.'
    patterns['collfeature'] = 'Yes' if c in  coll4op else 'Lacking'
    patterns['icollfeature'] = 'Yes' if c in icoll4op else 'Lacking'
    patterns['c'] = c
    patterns['init'] = init[c]("1")
    patterns['fini'] = fini[c]("1")
    patterns['operation'] = operation[c]("1")

    # Generate the incorrect matching
    replace = patterns
    replace['shortdesc'] = 'Collective @{c}@ with an operator  mismatch'
    replace['longdesc'] = f'Odd ranks use MPI_SUM as the operator while even ranks use MPI_MAX'
    replace['outcome'] = 'ERROR: OperatorMatching'
    replace['errormsg'] = 'Collective operator mistmatch. @{c}@ at @{filename}@:@{line:MBIERROR}@ has MPI_MAX or MPI_SUM as an operator.'
    replace['change_op'] = 'if (rank % 2)\n    op = MPI_MAX;'
    make_file(template, f'CollOpMatching_{c}_nok.c', replace)

    # Generate the call with Op=MPI_OP_NULL
    replace = patterns
    replace['shortdesc'] = 'Collective @{c}@ with an invalid operator '
    replace['longdesc'] = 'Collective @{c}@ with an invalid operator '
    replace['outcome'] = 'ERROR: InvalidOperator'
    replace['errormsg'] = 'Invalid Operator. @{c}@ at @{filename}@:@{line:MBIERROR}@ has MPI_OP_NULL as an operator.'
    replace['change_op'] = 'op = MPI_OP_NULL;'
    make_file(template, f'CollOpNull_{c}_nok.c', replace)
