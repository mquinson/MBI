#! /usr/bin/python3
import os
import sys
from generator_utils import *

template = """// @{generatedby}@
/* ///////////////////////// The MPI Bugs Initiative ////////////////////////

  Origin: MBI

  Description: @{shortdesc}@
    @{longdesc}@

  Version of MPI: Conforms to MPI 1.1, does not require MPI 2 implementation

BEGIN_MPI_FEATURES
  P2P!basic: @{p2pfeature}@
  P2P!nonblocking: @{ip2pfeature}@
  P2P!persistent: Lacking
  COLL!basic: Lacking
  COLL!nonblocking: Lacking
  COLL!persistent: Lacking
  COLL!tools: Lacking
  RMA: Lacking
END_MPI_FEATURES

BEGIN_MBI_TESTS
  $ mpirun -np 2 ${EXE} 2
  | @{outcome}@
  | @{errormsg}@
END_MBI_TESTS
//////////////////////       End of MBI headers        /////////////////// */

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 10000

int main(int argc, char **argv) {
  int nprocs = -1;
  int rank = -1;
  MPI_Status sta;
  int src,dest;
  int stag=0, rtag=0;
  int buff_size = N;

  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  printf("Hello from rank %d \\n", rank);

  if (nprocs < 2)
    printf("MBI ERROR: This test needs at least 2 processes to produce a bug!\\n");

  if (argc < 1)
    printf("MBI ERROR: This test needs at least 1 argument to produce a bug!\\n");

  MPI_Comm newcom = MPI_COMM_WORLD;
  MPI_Datatype type = MPI_INT;

  int n = atoi(argv[1]);
  int buffer[N] = {42};

  @{init1}@
  @{init2}@

  if (rank == 0) {
    dest=1, src=1;
    if ((n % 2) == 0) {
      @{operation1b}@
      @{fini1b}@
    } else {
      @{operation1a}@
      @{fini1a}@
    }
  }else if (rank == 1){
    dest=0, src=0;
    @{operation2}@
    @{fini2}@
  }

  @{free1}@
  @{free2}@

  MPI_Finalize();

  printf("Rank %d finished normally\\n", rank);
  return 0;
}
"""


for s in send + isend:
    for r in recv + irecv:
        patterns = {}
        patterns = {'s': s, 'r': r}
        patterns['generatedby'] = f'DO NOT EDIT: this file was generated by {os.path.basename(sys.argv[0])}. DO NOT EDIT.'
        patterns['p2pfeature'] = 'Yes' if s in send or r in recv else 'Lacking'
        patterns['ip2pfeature'] = 'Yes' if s in isend or r in irecv else 'Lacking'
        patterns['s'] = s
        patterns['r'] = r

        patterns['init1'] = init[r]("1")
        patterns['operation1a'] = operation[r]("1").replace("buf1", "buffer")
        patterns['operation1b'] = operation[r]("1").replace("buf2", "buffer")
        patterns['fini1a'] = fini[r]("1")
        patterns['fini1b'] = fini[r]("1")
        patterns['free1'] = free[r]("1")

        patterns['init2'] = init[s]("2")
        patterns['operation2'] = operation[s]("2").replace("buf1", "buffer")
        patterns['fini2'] = fini[s]("2")
        patterns['free2'] = free[s]("2")

        # Generate a correct matching
        replace = patterns
        replace['shortdesc'] = 'Correct call ordering.'
        replace['longdesc'] = 'Correct call ordering.'
        replace['outcome'] = 'OK'
        replace['errormsg'] = 'OK'
        make_file(template, f'InputHazardCallOrdering_{r}_{s}_ok.c', replace)

        # Generate the incorrect matching
        replace = patterns
        replace['shortdesc'] = 'Missing Recv function.'
        replace['longdesc'] = 'Missing Recv function for a path depending to input, a deadlock is created.'
        replace['outcome'] = 'ERROR: CallMatching'
        replace['errormsg'] = 'P2P mistmatch. Missing @{r}@ at @{filename}@:@{line:MBIERROR}@.'
        replace['operation1b'] = '/* MBIERROR */'
        replace['fini1b'] = ''
        make_file(template, f'InputHazardCallOrdering_{r}_{s}_nok.c', replace)
